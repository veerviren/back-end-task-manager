#!/bin/sh
set -e

echo "Starting Campus Exchange service..."

# Check environment
if [ "$NODE_ENV" = "production" ]; then
  echo "Running in production mode (Cloud Run)..."
  
  # In production, don't wait for PostgreSQL to start locally
  echo "Using Cloud SQL connection..."
  
  # Apply migrations (don't reset in production!)
  echo "Applying database migrations..."
  npx prisma migrate deploy
else
  echo "Running in development mode..."
  
  # Wait for PostgreSQL to be ready
  echo "Waiting for PostgreSQL to start..."
  max_attempts=30
  attempt_num=1
  
  while [ $attempt_num -le $max_attempts ]; do
    # Try using pg_isready to check if PostgreSQL is up
    if pg_isready -h ${POSTGRES_HOST:-postgres} -p ${POSTGRES_PORT:-5432} -U ${POSTGRES_USER:-postgres} > /dev/null 2>&1; then
      echo "PostgreSQL is up and ready!"
      break
    fi
    
    # If Prisma can connect, that's also a good indicator
    if npx prisma migrate status > /dev/null 2>&1; then
      echo "Prisma can connect to PostgreSQL!"
      break
    fi
    
    echo "PostgreSQL is unavailable - sleeping (Attempt: $attempt_num/$max_attempts)"
    sleep 2
    attempt_num=$(( attempt_num + 1 ))
  done
  
  if [ $attempt_num -gt $max_attempts ]; then
    echo "Failed to connect to PostgreSQL after $max_attempts attempts. Exiting..."
    exit 1
  fi
  
  echo "PostgreSQL is up - starting fresh database setup"
  
  # Reset the database (drops all tables and recreates them) - only in development
  echo "Resetting database..."
  npx prisma migrate reset --force --skip-generate
  
  # Apply migrations - in case reset doesn't apply them all
  echo "Applying migrations..."
  npx prisma migrate deploy
fi

# Generate Prisma client for all environments
echo "Generating Prisma client..."
npx prisma generate

echo "Database setup completed successfully!"

# Print environment info (without sensitive details)
echo "Environment: $NODE_ENV"
echo "Port: $PORT"

# Start the application
echo "Starting the application on port ${PORT}..."
exec "$@"
