steps:
  # Build the container image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/campus-exchange:$COMMIT_SHA', '.']
  
  # Push the container image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/campus-exchange:$COMMIT_SHA']
  
  # Deploy container image to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
    - 'run'
    - 'deploy'
    - 'campus-exchange'
    - '--image'
    - 'gcr.io/$PROJECT_ID/campus-exchange:$COMMIT_SHA'
    - '--region'
    - 'us-central1'
    - '--platform'
    - 'managed'
    - '--allow-unauthenticated'
    - '--add-cloudsql-instances'
    - '${_CLOUD_SQL_CONNECTION_NAME}'
    - '--set-env-vars'
    - 'NODE_ENV=production,DATABASE_URL=${_DATABASE_URL},BASE_URL=${_BASE_URL},JWT_SECRET=${_JWT_SECRET},EMAIL_HOST=${_EMAIL_HOST},EMAIL_PORT=${_EMAIL_PORT},EMAIL_SECURE=${_EMAIL_SECURE},EMAIL_USER=${_EMAIL_USER},EMAIL_PASS=${_EMAIL_PASS},EMAIL_FROM=${_EMAIL_FROM}'

# Store images
images:
  - 'gcr.io/$PROJECT_ID/campus-exchange:$COMMIT_SHA'

substitutions:
  _CLOUD_SQL_CONNECTION_NAME: 'project-id:region:instance' # Your Cloud SQL instance connection name
  _DATABASE_URL: 'postgresql://user:password@/dbname?host=/cloudsql/project-id:region:instance'
  _BASE_URL: 'https://campus-exchange-xxxxx.a.run.app'
  _JWT_SECRET: 'your-secret-key-here'
  _EMAIL_HOST: 'smtp.gmail.com'
  _EMAIL_PORT: '587'
  _EMAIL_SECURE: 'false'
  _EMAIL_USER: 'your-email@example.com'
  _EMAIL_PASS: 'your-email-password'
  _EMAIL_FROM: 'noreply@yourapp.com'

# Note: You should use Secret Manager for sensitive values instead of putting them directly in this file
# Check documentation for setting up Secret Manager with Cloud Build
